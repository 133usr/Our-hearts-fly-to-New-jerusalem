{"version":3,"file":"bundle.e9b9d461cd0fdad17d04.js","mappings":"mBACA,I,KCwCA,IAAIA,EACAC,ECzCoB,CAACC,IACH,oBAAXC,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeJ,EAASC,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeJ,EAAS,aAAc,CAAEK,OAAO,GAAO,E,IDuC9D,WACIP,EAAS,IAAIQ,EAAAA,QAAAA,OAAc,mBAC3BR,EAAOS,MAAMC,MAAMC,gBAAiB,EAGpC,MAAMC,EAAmBJ,EAAAA,QAAAA,WAAAA,YAA8B,OAAS,QAAS,KACzEP,EAAiBD,EAAOa,SAASC,IAAI,CACjCC,SAAUH,EACVI,MAAO,CACHC,IAAK,4BACLC,MAAO,OAIflB,EAAOmB,OAAOnB,EAAOa,UAMzB,SAAwBO,GACpB,MAAMC,EAAgBb,EAAAA,QAAAA,WAAAA,YAA8B,SAAU,QAAS,KAGjEc,EAAuBd,EAAAA,QAAAA,WAAAA,KACzBP,EAAec,SAASQ,SAASvB,EAAOwB,MAAMC,aAC9CJ,EATW,GAWX,IAAIb,EAAAA,QAAAA,YAIRP,EAAec,SAASW,SAASJ,EACrC,CAhBIK,EACJ,CAiBAC,E","sources":["webpack://fly_to_mother/webpack/bootstrap","webpack://fly_to_mother/./src/script.js","webpack://fly_to_mother/webpack/runtime/make namespace object"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// // The URL on your server where CesiumJS's static files are hosted.\n// window.CESIUM_BASE_URL = '/';\n\n// import { Cartesian3, createOsmBuildingsAsync, Ion, Math as CesiumMath, Terrain, Viewer } from 'cesium';\n// import \"cesium/Build/Cesium/Widgets/widgets.css\";\n\n// // Your access token can be found at: https://ion.cesium.com/tokens.\n// // Replace `your_access_token` with your Cesium ion access token.\n\n// Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI3MjAyYjg4NC02NzM0LTQxOGMtOGNhOC0wZDYxN2Q4ZTA2YmEiLCJpZCI6MTgzODk5LCJpYXQiOjE3MDIzNTg1ODd9.ti2Hyf1LxJL3UPbXCUwuIz8So9DCU3Uwovqm-FN0gxI';\n\n// // Initialize the Cesium Viewer in the HTML element with the `cesiumContainer` ID.\n// const viewer = new Viewer('cesiumContainer', {\n//   terrain: Terrain.fromWorldTerrain(),\n// });    \n\n// // Fly the camera to San Francisco at the given longitude, latitude, and height.\n// viewer.camera.flyTo({\n//   destination: Cartesian3.fromDegrees(-122.4175, 37.655, 400),\n//   orientation: {\n//     heading: CesiumMath.toRadians(0.0),\n//     pitch: CesiumMath.toRadians(-15.0),\n//   }\n// });\n\n// // Add Cesium OSM Buildings, a global 3D buildings layer.\n// const buildingTileset = await createOsmBuildingsAsync();\n// viewer.scene.primitives.add(buildingTileset);   \n\n\n\n\n\n\n\n\n\n\n// Assuming you have CesiumJS installed via npm\nimport Cesium from 'cesium';\n\nlet viewer;\nlet airplaneEntity;\n\nfunction initializeCesium() {\n    viewer = new Cesium.Viewer('cesiumContainer');\n    viewer.scene.globe.enableLighting = true;\n\n    // Load the 3D model of the airplane\n    const airplanePosition = Cesium.Cartesian3.fromDegrees(85.3240, 27.7172, 10000); // Nepal coordinates\n    airplaneEntity = viewer.entities.add({\n        position: airplanePosition,\n        model: {\n            uri: 'path_to_your_airplane.glb', // Replace with the path to your airplane model\n            scale: 100.0\n        }\n    });\n\n    viewer.zoomTo(viewer.entities); // Zoom to show the airplane\n\n    // Simulate flight when the function is called\n    simulateFlight(0.2); // Change the argument to set the flight percentage (e.g., 0.2 for 20%)\n}\n\nfunction simulateFlight(flightPercentage) {\n    const koreaPosition = Cesium.Cartesian3.fromDegrees(127.7669, 35.9078, 10000); // Korea coordinates\n\n    // Calculate the intermediate position based on the percentage\n    const interpolatedPosition = Cesium.Cartesian3.lerp(\n        airplaneEntity.position.getValue(viewer.clock.currentTime),\n        koreaPosition,\n        flightPercentage,\n        new Cesium.Cartesian3()\n    );\n\n    // Update airplane's position\n    airplaneEntity.position.setValue(interpolatedPosition);\n}\n\ninitializeCesium(); // Call the initialization function\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["viewer","airplaneEntity","exports","Symbol","toStringTag","Object","defineProperty","value","Cesium","scene","globe","enableLighting","airplanePosition","entities","add","position","model","uri","scale","zoomTo","flightPercentage","koreaPosition","interpolatedPosition","getValue","clock","currentTime","setValue","simulateFlight","initializeCesium"],"sourceRoot":""}